{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","breakLength","sessionLength","timeLeft","timerType","timerID","start","handleBreakDecrement","bind","assertThisInitialized","handleBreakIncrement","handleSessionDecrement","handleSessionIncrement","toggleCountdown","handleReset","clockify","decrementTimer","e","setState","prevState","preventDefault","_this2","handleCountdown","clearInterval","_this3","timerVariable","setInterval","audioBeep","play","pause","currentTime","minutes","Math","floor","seconds","_this4","react_default","a","createElement","id","src_Break","breakDecrement","breakIncrement","src_Session","sessionDecrement","sessionIncrement","style","color","onClick","preload","src","ref","audio","React","Component","Break","Session","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76c17780.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timeLeft: 1500,\n      timerType: 'Session',\n      timerID: '',\n      start: false\n    }\n    \n    this.handleBreakDecrement = this.handleBreakDecrement.bind(this);\n    this.handleBreakIncrement = this.handleBreakIncrement.bind(this);\n    this.handleSessionDecrement = this.handleSessionDecrement.bind(this);\n    this.handleSessionIncrement = this.handleSessionIncrement.bind(this);\n    this.toggleCountdown = this.toggleCountdown.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.clockify = this.clockify.bind(this);\n    this.decrementTimer = this.decrementTimer.bind(this);\n  }\n  \n  handleBreakDecrement(e) {\n    if (this.state.start || this.state.breakLength <= 1) {\n      return;\n    } else {\n      if (this.state.timerType === 'Break') {\n        this.setState((prevState) => {\n          return {\n            breakLength: prevState.breakLength - 1,\n            timeLeft: (prevState.breakLength - 1) * 60\n          }\n        }); \n      } else {\n        this.setState((prevState) => {\n          return {\n            breakLength: prevState.breakLength - 1\n          }\n        })\n      }\n    } \n   e.preventDefault(); \n  }\n  \n  handleBreakIncrement(e) {\n    if (this.state.start || this.state.breakLength >= 60) {\n      return;\n    } else {\n      if (this.state.timerType === 'Break') {\n        this.setState((prevState) => {\n          return {\n            breakLength: prevState.breakLength + 1,\n            timeLeft: (prevState.breakLength + 1) * 60\n          }\n        }); \n      } else {\n        this.setState((prevState) => {\n          return {\n            breakLength: prevState.breakLength + 1\n          }\n        })\n      }\n    } \n   e.preventDefault(); \n  }\n  \n  handleSessionIncrement(e) {\n    if (this.state.start || this.state.sessionLength >= 60) {\n      return;\n    } else {\n      if (this.state.timerType === 'Session') {\n        this.setState((prevState) => {\n          return {\n            sessionLength: prevState.sessionLength + 1,\n            timeLeft: (prevState.sessionLength + 1) * 60\n          }\n        }); \n      } else {\n        this.setState((prevState) => {\n          return {\n            sessionLength: prevState.sessionLength + 1\n          }\n        })\n      }\n    } \n   e.preventDefault(); \n  }\n  \n  handleSessionDecrement(e) {\n    if (this.state.start || this.state.sessionLength <= 1) {\n      return;\n    } else {\n      if (this.state.timerType === 'Session') {\n        this.setState((prevState) => {\n          return {\n            sessionLength: prevState.sessionLength - 1,\n            timeLeft: (prevState.sessionLength - 1) * 60\n          }\n        }); \n      } else {\n        this.setState((prevState) => {\n          return {\n            sessionLength: prevState.sessionLength - 1\n          }\n        })\n      }\n    } \n   e.preventDefault(); \n  }\n  \n  toggleCountdown(e) {\n    this.setState((prevState) => {\n      return {start: prevState.start ? false : true}\n    }, () => {\n      if (this.state.start) {\n        this.handleCountdown();\n      } else {\n        clearInterval(this.state.timerID);\n      }\n    })\n    e.preventDefault();\n  }\n  \n  handleCountdown() {\n    const timerVariable = setInterval(() => {\n      if (this.state.timeLeft > 0) {\n        this.decrementTimer()\n      } else {\n        this.audioBeep.play();\n        this.setState({\n          timeLeft: this.state.timerType === 'Session' ? this.state.breakLength * 60 : this.state.sessionLength * 60,\n          timerType: this.state.timerType === 'Session' ? 'Break' : 'Session'\n        })\n      }\n    }, 1000)\n    this.setState({\n      timerID: timerVariable\n    })\n  }\n  \n  decrementTimer() {\n    this.setState((prevState) => {\n      return {timeLeft: prevState.timeLeft - 1}\n    })\n  }\n  \n  handleReset(e) {\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timeLeft: 1500,\n      timerType: 'Session',\n      start: false\n    })\n    clearInterval(this.state.timerID);\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n    e.preventDefault();\n  }\n  \n  clockify() {\n    let minutes = Math.floor(this.state.timeLeft / 60);\n    let seconds = this.state.timeLeft - (minutes * 60);\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    return minutes + ':' + seconds;\n  }\n  \n  render() {\n    return (\n      <div id=\"app-container\">\n        <h1>Pomodoro Clock</h1>\n        <div id=\"flex-container\">\n          <Break\n            breakLength={this.state.breakLength}\n            breakDecrement={this.handleBreakDecrement}\n            breakIncrement={this.handleBreakIncrement}\n          />\n          <Session\n            sessionLength={this.state.sessionLength}\n            sessionDecrement={this.handleSessionDecrement}\n            sessionIncrement={this.handleSessionIncrement}\n          />\n        </div>\n        <div id=\"timer-container\">\n          <h2 id=\"timer-label\">{this.state.timerType}</h2>\n          <p id=\"time-left\" style={this.state.timeLeft <= 60 ? {color:'red'}:{color:'black'}}>{this.clockify()}</p>\n          <button id=\"start_stop\" onClick={this.toggleCountdown}>Start/Stop</button>\n          <button id=\"reset\" onClick={this.handleReset}>Reset</button>\n          <audio id=\"beep\" preload=\"auto\" src=\"https://spencercorwin.com/assets/gong.mp3\"\n            ref={(audio) => { this.audioBeep = audio; }} />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Break extends React.Component {\n  render() {\n    return(\n      <div id=\"break-container\">\n        <h2 id=\"break-label\">Break Length</h2>\n        <p id=\"break-length\">{this.props.breakLength}</p>\n        <button id=\"break-decrement\" onClick={this.props.breakDecrement}>-</button>\n        <button id=\"break-increment\" onClick={this.props.breakIncrement}>+</button>\n      </div>\n    )\n  }\n}\n\nclass Session extends React.Component {\n  render() {\n    return(\n      <div id=\"session-container\">\n        <h2 id=\"session-label\">Session Length</h2>\n        <p id=\"session-length\">{this.props.sessionLength}</p>\n        <button id=\"session-decrement\" onClick={this.props.sessionDecrement}>-</button>\n        <button id=\"session-increment\" onClick={this.props.sessionIncrement}>+</button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}