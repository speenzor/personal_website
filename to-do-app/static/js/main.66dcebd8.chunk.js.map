{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todo","input","handleSubmit","bind","assertThisInitialized","handleChange","handleDelete","handleClear","handleEdit","handleSmallSubmit","e","setState","toConsumableArray","concat","editing","id","Date","now","preventDefault","key","toggledToDo","filter","indexOfToDo","findIndex","slice","target","value","react_default","a","createElement","src_Form","click","change","clear","src_ToDos","todos","delete","edit","submit","React","Component","Form","onSubmit","type","onChange","onClick","ToDos","_this2","map","x","src_ToDo","ToDo","_this3","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66dcebd8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        todo: [],\n        input: ''\n      };\n  \n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.handleDelete = this.handleDelete.bind(this);\n      this.handleClear = this.handleClear.bind(this);\n      this.handleEdit = this.handleEdit.bind(this);\n      this.handleSmallSubmit = this.handleSmallSubmit.bind(this);\n    }\n  \n    //Adds the current \"value\" of the form's input to the App state\n    handleSubmit(e) {\n      this.setState({\n        todo: [...this.state.todo, {todo: this.state.input, editing: false, id: Date.now()}],\n        input: ''\n      });\n      e.preventDefault();\n    }\n  \n    handleSmallSubmit(e, key) {\n      let toggledToDo = this.state.todo.filter(todo => todo.id == key)[0];\n      toggledToDo.todo = this.state.input;\n      toggledToDo.editing = false;\n      let indexOfToDo = this.state.todo.findIndex(todo => todo.id === key);\n      this.setState({\n        todo: [...this.state.todo.slice(0,indexOfToDo), toggledToDo, ...this.state.todo.slice(indexOfToDo+1)],\n        input: ''\n      });\n      e.preventDefault();\n    }\n  \n    //Changes the input state when the form's input changes\n    handleChange(e) {\n      this.setState({\n        input: e.target.value\n      })\n    }\n  \n    handleDelete(key) {\n      this.setState({\n        todo: this.state.todo.filter(todo => todo.id !== key),\n        input: ''\n      })\n    }\n  \n    handleEdit(key) {\n      let toggledToDo = this.state.todo.filter(todo => todo.id == key)[0];\n      toggledToDo.editing = true;\n      let indexOfToDo = this.state.todo.findIndex(todo => todo.id === key);\n      this.setState({\n        todo: [...this.state.todo.slice(0,indexOfToDo), toggledToDo, ...this.state.todo.slice(indexOfToDo+1)],\n        input: toggledToDo.todo\n      })\n    }\n  \n    handleClear() {\n      this.setState({\n        todo: [],\n        input: ''\n      })\n    }\n  \n  \n    render() {\n      return (\n       <div id=\"app\">\n          <h1>To Do App</h1>\n          <Form\n            click={this.handleSubmit}\n            change={this.handleChange}\n            input={this.state.input}\n            clear={this.handleClear} />\n          <ToDos\n            todos={this.state.todo}\n            delete={this.handleDelete}\n            edit={this.handleEdit}\n            change={this.handleChange}\n            submit={this.handleSmallSubmit}\n            input={this.state.input} />\n       </div>\n      )\n    }\n  }\n  \n  class Form extends React.Component {\n    render() {\n      return (\n          <form onSubmit={this.props.click}>\n            <input type=\"text\" value={this.props.input} onChange={this.props.change}/>\n            <input type=\"submit\" value=\"Submit\"/>\n            <button onClick={this.props.clear}>Clear All</button>\n          </form>\n      )\n    }\n  }\n  \n  class ToDos extends React.Component {\n    render() {\n      return (\n        <ul id=\"flex\">\n          {this.props.todos.map(x =>\n                                <ToDo\n                                  delete={this.props.delete}\n                                  edit={this.props.edit}\n                                  change={this.props.change}\n                                  input={this.props.input}\n                                  submit={this.props.submit}\n                                  todo={x}/>\n                               )}\n        </ul>\n      )\n    }\n  }\n  \n  class ToDo extends React.Component {\n    delete(key) {\n      this.props.delete(key);\n    }\n  \n    edit(key) {\n      this.props.edit(key);\n    }\n  \n    submit(e, key) {\n      this.props.submit(e, key);\n    }\n  \n    render() {\n      if(this.props.todo.editing) {\n        return (\n        <li key={this.props.todo.id}>\n            <div onClick={() => this.delete(this.props.todo.id)}>x</div>\n            <form onSubmit={(e) => this.submit(e, this.props.todo.id)}>\n              <input type=\"text\" value={this.props.input} onChange={this.props.change}/>\n              <input id=\"submit\" type=\"submit\" value=\"Submit\"/>\n            </form>\n        </li>\n        )\n      } else {\n        return (\n        <li key={this.props.todo.id}>\n            <div onClick={() => this.delete(this.props.todo.id)}>x</div>\n            {this.props.todo.todo}\n            <button onClick={() => this.edit(this.props.todo.id)}>Edit</button>\n        </li>\n        )\n      }\n    }\n  }\n  \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}