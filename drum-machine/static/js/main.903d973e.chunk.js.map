{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","drumpads","Q","id","name","trigger","src","W","E","A","S","D","Z","X","C","lastSound","handleClick","bind","assertThisInitialized","button","setState","react_default","a","createElement","src_Display","display","src_Drumpad","pad","click","React","Component","Display","Drumpad","_this2","document","addEventListener","e","handleKeyPress","keyCode","playSound","source","sound","getElementById","currentTime","play","_this3","class","onClick","preload","type","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.903d973e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumpads: {\n        Q: {id: 'Q', name: 'Heater-1', trigger: 81, src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'},\n        W: {id: 'W', name: 'Heater-2', trigger: 87, src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'},\n        E: {id: 'E', name: 'Heater-3', trigger: 69, src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'},\n        A: {id: 'A', name: 'Heater-4', trigger: 65, src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'},\n        S: {id: 'S', name: 'Clap', trigger: 83, src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'},\n        D: {id: 'D', name: 'Open-HH', trigger: 68, src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'},\n        Z: {id: 'Z', name: \"Kick-n'-Hat\", trigger: 90, src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'},\n        X: {id: 'X', name: 'Kick', trigger: 88, src: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'},\n        C: {id: 'C', name: 'Closed-HH', trigger: 67, src: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'}\n      },\n      lastSound: ''\n    }\n    \n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  handleClick(button) {\n    this.setState({\n      lastSound: this.state.drumpads[button].name\n    })\n  }\n  \n  render() {\n    return (\n      <div>\n        <Display display={this.state.lastSound} />\n        <div id=\"pad-container\">\n          <Drumpad pad={this.state.drumpads.Q} click={this.handleClick} />\n          <Drumpad pad={this.state.drumpads.W} click={this.handleClick} />\n          <Drumpad pad={this.state.drumpads.E} click={this.handleClick} />\n          <Drumpad pad={this.state.drumpads.A} click={this.handleClick} />\n          <Drumpad pad={this.state.drumpads.S} click={this.handleClick} />\n          <Drumpad pad={this.state.drumpads.D} click={this.handleClick} />\n          <Drumpad pad={this.state.drumpads.Z} click={this.handleClick} />\n          <Drumpad pad={this.state.drumpads.X} click={this.handleClick} />\n          <Drumpad pad={this.state.drumpads.C} click={this.handleClick} />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Display extends React.Component {\n  render() {\n    return (\n      <div id=\"display\">\n        <span>React Drum Machine</span>\n        <p id=\"audio-name-container\">Last beat played: {this.props.display}</p>\n      </div>\n    )\n  }\n}\n\nclass Drumpad extends React.Component {\n  componentDidMount() {\n    document.addEventListener('keydown', (e) => this.handleKeyPress(e, this.props.pad.trigger));\n  }\n  \n  /*componentDidUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }*/\n  \n  handleKeyPress(e, trigger) {\n    if (e.keyCode === trigger) {\n      this.playSound(this.props.pad.id);\n    }\n  }\n  \n  playSound(source) {\n    const sound = document.getElementById(source);\n    sound.currentTime = 0;\n    sound.play();\n    this.props.click(source);\n  }\n  \n  render() {\n    return (\n      <div class=\"drum-pad\"  id={this.props.pad.name} onClick={() => this.playSound(this.props.pad.id)}>\n        {this.props.pad.id}\n        <audio class=\"clip\" preload=\"auto\" id={this.props.pad.id} src={this.props.pad.src} type=\"audio/mpeg\" />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"drum-machine\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}